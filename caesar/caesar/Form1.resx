<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnDown.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>